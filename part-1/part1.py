# -*- coding: utf-8 -*-
"""part_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-3v6Pkj0xHe332Zql6UfiGn8WLyKNHV4
"""

from  google.colab import drive
drive.mount('/content/drive')

from torchvision.models.detection import fasterrcnn_resnet50_fpn
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import torchvision.transforms as transforms

detection_model = fasterrcnn_resnet50_fpn(pretrained=True, progress=False)

detection_model.eval();

sample_image = Image.open("../content/drive/My Drive/Colab Notebooks/img/cat_1.jpg")

transform = transforms.Compose([
    transforms.ToTensor(),
])

sample_image_tensor = transform(sample_image)
sample_image_tensor

sample_image_tensor.shape

sample_image_tensor = sample_image_tensor.unsqueeze(dim=0)
sample_image_tensor.shape

preds = detection_model(sample_image_tensor)
preds

NAMES_COCO = [
    '','__background__','person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat',
    'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog',
    'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella',
    'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite',
    'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle',
    'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich',
    'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch',
    'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote',
    'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book',
    'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]

img = sample_image_tensor.squeeze().detach().cpu().numpy()
img = img.transpose(1, 2, 0)

fig, ax = plt.subplots(1, figsize=(12, 9))

ax.imshow(img)

for box, label, score in zip(preds[0]['boxes'], preds[0]['labels'], preds[0]['scores']):
    x1, y1, x2, y2 = box.detach().cpu().numpy()
    label_name = NAMES_COCO[label.item()]
    rect = patches.Rectangle((x1, y1), x2 - x1, y2 - y1, linewidth=1, edgecolor='r', facecolor='none')
    ax.add_patch(rect)
    plt.text(x1, y1, f'{label_name} {score.item():.2f}', color='white', fontsize=8, bbox=dict(facecolor='red', alpha=0.5))

plt.axis('off')
plt.show()

fixed_threshold = 0.8

img = sample_image_tensor.squeeze().detach().cpu().numpy()
img = img.transpose(1, 2, 0)

fig, ax = plt.subplots(1, figsize=(12, 9))

ax.imshow(img)

for box, label, score in zip(preds[0]['boxes'], preds[0]['labels'], preds[0]['scores']):
    if score.item() > fixed_threshold:
        x1, y1, x2, y2 = box.detach().cpu().numpy()

        label_index = label.item()

        label_name = NAMES_COCO[label_index]
        rect = patches.Rectangle((x1, y1), x2 - x1, y2 - y1, linewidth=1, edgecolor='r', facecolor='none')
        ax.add_patch(rect)
        plt.text(x1, y1, f'{label_name} {score.item():.2f}', color='white', fontsize=8, bbox=dict(facecolor='red', alpha=0.5))

plt.axis('off')
plt.show()
